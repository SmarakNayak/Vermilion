# This is a workflow that initializes replication from primary to secondary
# It also sets up replication from secondary to primary but does not start it
name: 7. Initialize Blue Green Replication

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      hetzner_primary_server:
        description: 'Which server is primary? Hetzner_blue or Hetzner_green'
        required: true
        default: 'Hetzner_'
      hetzner_secondary_server:
        description: 'Which server is secondary? Hetzner_blue or Hetzner_green'
        required: true
        default: 'Hetzner_'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Check-Inputs:
    runs-on: ubuntu-latest
    outputs:
      primary_server_color: ${{ steps.input-checker.outputs.PRIMARY_SERVER_COLOR }}
      secondary_server_color: ${{ steps.input-checker.outputs.SECONDARY_SERVER_COLOR }}
    steps:
      - name: Check Inputs
        id: input-checker
        run: | ## make sure hetzner_primary_server and hetzner_secondary_server are not the same, make sure one of them is Hetzner_blue and the other is Hetzner_green
          if [ "${{ github.event.inputs.hetzner_primary_server }}" != "Hetzner_blue" ] && [ "${{ github.event.inputs.hetzner_primary_server }}" != "Hetzner_green" ]; then
            echo "Error: hetzner_primary_server must be Hetzner_blue or Hetzner_green."
            exit 1
          fi
          if [ "${{ github.event.inputs.hetzner_secondary_server }}" != "Hetzner_blue" ] && [ "${{ github.event.inputs.hetzner_secondary_server }}" != "Hetzner_green" ]; then
            echo "Error: hetzner_secondary_server must be Hetzner_blue or Hetzner_green."
            exit 1
          fi
          if [ "${{ github.event.inputs.hetzner_primary_server }}" == "${{ github.event.inputs.hetzner_secondary_server }}" ]; then
            echo "Error: hetzner_primary_server and hetzner_secondary_server cannot be the same."
            exit 1
          fi
          if [ "${{ github.event.inputs.hetzner_primary_server }}" == "Hetzner_blue" ]; then
            echo "PRIMARY_SERVER_COLOR=blue" >> $GITHUB_OUTPUT
            echo "SECONDARY_SERVER_COLOR=green" >> $GITHUB_OUTPUT
          else
            echo "PRIMARY_SERVER_COLOR=green" >> $GITHUB_OUTPUT
            echo "SECONDARY_SERVER_COLOR=blue" >> $GITHUB_OUTPUT
          fi

  Check-Primary:
    needs: Check-Inputs
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_primary_server }}'
    steps:
      - name: Check colour and status match
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            if [ -f ~/server_colour ]; then
              COLOUR=$(cat ~/server_colour)
              if [ "$COLOUR" != "${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }}" ]; then
                echo "Error: ${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }} server is currently reporting as $COLOUR"
                exit 1
              fi
            else
              echo "${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }}" > ~/server_colour
            fi
            if [ -f ~/server_status ]; then
              STATE=$(cat ~/server_status)
              if [ "$STATE" != "primary" ]; then
                echo "Error: You are trying to initialize ${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }} as primary but it is currently $STATE"
                exit 1
              fi
            else
              echo "primary" > ~/server_status
            fi

  Check-Secondary:
    needs: Check-Inputs
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_secondary_server }}'
    steps:
      - name: Check colour and status match
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            if [ -f ~/server_colour ]; then
              COLOUR=$(cat ~/server_colour)
              if [ "$COLOUR" != "${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }}" ]; then
                echo "Error: ${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }} server is currently reporting as $COLOUR"
                exit 1
              fi
            else
              echo "${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }}" > ~/server_colour
            fi
            if [ -f ~/server_status ]; then
              STATE=$(cat ~/server_status)
              if [ "$STATE" != "secondary" ]; then
                echo "Error: You are trying to initialize ${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }} as secondary but it is currently $STATE"
                exit 1
              fi
            else
              echo "secondary" > ~/server_status
            fi

  Initialize-Primary-Pub:
    needs: [Check-Inputs, Check-Primary, Check-Secondary]
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_primary_server }}'
    steps:
      - name: Initialize Primary Publication
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            sudo --login -u postgres psql -d vermilion -c "GRANT ALL ON SCHEMA social TO ${{secrets.MYSQL_USER}}"
            sudo --login -u postgres psql -d vermilion -c "ALTER ROLE ${{secrets.MYSQL_USER}} WITH REPLICATION;"
            sudo --login -u postgres psql -d vermilion -c "GRANT PG_CREATE_SUBSCRIPTION TO ${{secrets.MYSQL_USER}};"
            export PGPASSWORD=${{ secrets.MYSQL_PASS }}
            PUB_EXISTS=$(psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -t -c "SELECT 1 FROM pg_publication WHERE pubname = 'social_pub_from_${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }}';")
            if [ -z "$PUB_EXISTS" ]; then
              psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "CREATE PUBLICATION social_pub_from_${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }} FOR TABLES IN SCHEMA social;"
            fi

  Initialize-Secondary-Pub-Sub:
    needs: [Check-Inputs, Initialize-Primary-Pub]
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_secondary_server }}'
    steps:
      - name: Initialize Secondary Publication and Subscription
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            sudo --login -u postgres psql -d vermilion -c "GRANT ALL ON SCHEMA social TO ${{secrets.MYSQL_USER}}"
            sudo --login -u postgres psql -d vermilion -c "ALTER ROLE ${{secrets.MYSQL_USER}} WITH REPLICATION;"
            sudo --login -u postgres psql -d vermilion -c "GRANT PG_CREATE_SUBSCRIPTION TO ${{secrets.MYSQL_USER}};"
            export PGPASSWORD=${{ secrets.MYSQL_PASS }}
            SUB_EXISTS=$(psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -t -c "SELECT 1 FROM pg_subscription WHERE subname = 'social_sub_to_${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }}';")
            if [ -z "$SUB_EXISTS" ]; then
              psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "
                CREATE SUBSCRIPTION social_sub_to_${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }} 
                CONNECTION 'host=${{ vars.ALTERNATE_SERVER_HOST }} port=5432 user=${{ secrets.MYSQL_USER }} dbname=vermilion password=${{ secrets.MYSQL_PASS }}' 
                PUBLICATION social_pub_from_${{ needs.Check-Inputs.outputs.PRIMARY_SERVER_COLOR }}
                WITH (origin = none, copy_data = false);"
            fi
            PUB_EXISTS=$(psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -t -c "SELECT 1 FROM pg_publication WHERE pubname = 'social_pub_from_${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }}';")
            if [ -z "$PUB_EXISTS" ]; then
              psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "CREATE PUBLICATION social_pub_from_${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }} FOR TABLES IN SCHEMA social;"
            fi
  
  # For this job we initially had a disabled subscription to the secondary server
  # but when we re enabled it, all changes made on the secondary server were carried over to the primary server
  # This may lead test writes/deletes to be carried over to the primary server
  # so instead we drop the subscription and create a new one on promotion
  Initialize-Primary-Disabled-Sub:
    needs: [Check-Inputs, Initialize-Secondary-Pub-Sub]
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_primary_server }}'
    steps:
      - name: Initialize Primary (deleted) Subscription to Secondary
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            export PGPASSWORD=${{ secrets.MYSQL_PASS }}
            psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "DROP SUBSCRIPTION IF EXISTS social_sub_to_${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }};"
            # SUB_EXISTS=$(psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -t -c "SELECT 1 FROM pg_subscription WHERE subname = 'social_sub_to_${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }}';")
            # if [ -z "$SUB_EXISTS" ]; then
            #   psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "
            #   CREATE SUBSCRIPTION social_sub_to_${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }} 
            #   CONNECTION 'host=${{ vars.ALTERNATE_SERVER_HOST }} port=5432 user=${{ secrets.MYSQL_USER }} dbname=vermilion password=${{ secrets.MYSQL_PASS }}' 
            #   PUBLICATION social_pub_from_${{ needs.Check-Inputs.outputs.SECONDARY_SERVER_COLOR }} 
            #   WITH (enabled = false, origin = none, copy_data = false);"
            # fi