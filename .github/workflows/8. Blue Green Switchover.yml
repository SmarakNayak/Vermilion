# This is a workflow that promotes one server to primary and demotes the other to secondary
name: 8. Blue Green Switchover

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      hetzner_promote_server:
        description: 'Which server to promote? Hetzner_blue or Hetzner_green'
        required: true
        default: 'Hetzner_'
      hetzner_demote_server:
        description: 'Which server to demote? Hetzner_blue or Hetzner_green'
        required: true
        default: 'Hetzner_'
      skip_sub_to_new_primary:
        description: 'Skip setting up subscription to new primary (only use when schemas are incompatible - you will need to manually set up the sub once schemas are compatible)'
        type: boolean
        default: false
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Check-Inputs:
    runs-on: ubuntu-latest
    outputs:
      promote_server_color: ${{ steps.input-checker.outputs.PROMOTE_SERVER_COLOR }}
      demote_server_color: ${{ steps.input-checker.outputs.DEMOTE_SERVER_COLOR }}
    steps:
      - name: Check Inputs
        id: input-checker
        run: | ## make sure hetzner_primary_server and hetzner_secondary_server are not the same, make sure one of them is Hetzner_blue and the other is Hetzner_green
          if [ "${{ github.event.inputs.hetzner_promote_server }}" != "Hetzner_blue" ] && [ "${{ github.event.inputs.hetzner_promote_server }}" != "Hetzner_green" ]; then
            echo "Error: hetzner_promote_server must be Hetzner_blue or Hetzner_green."
            exit 1
          fi
          if [ "${{ github.event.inputs.hetzner_demote_server }}" != "Hetzner_blue" ] && [ "${{ github.event.inputs.hetzner_demote_server }}" != "Hetzner_green" ]; then
            echo "Error: hetzner_demote_server must be Hetzner_blue or Hetzner_green."
            exit 1
          fi
          if [ "${{ github.event.inputs.hetzner_promote_server }}" == "${{ github.event.inputs.hetzner_demote_server }}" ]; then
            echo "Error: hetzner_promote_server and hetzner_demote_server cannot be the same."
            exit 1
          fi
          if [ "${{ github.event.inputs.hetzner_promote_server }}" == "Hetzner_blue" ]; then
            echo "PROMOTE_SERVER_COLOR=blue" >> $GITHUB_OUTPUT
            echo "DEMOTE_SERVER_COLOR=green" >> $GITHUB_OUTPUT
          else
            echo "PROMOTE_SERVER_COLOR=green" >> $GITHUB_OUTPUT
            echo "DEMOTE_SERVER_COLOR=blue" >> $GITHUB_OUTPUT
          fi

  Check-Promote:
    needs: Check-Inputs
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_promote_server }}'
    steps:
      - name: Check promote colour and status match
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            if [ -f ~/server_colour ]; then
              COLOUR=$(cat ~/server_colour)
              if [ "$COLOUR" != "${{ needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR }}" ]; then
                echo "Error: ${{ needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR }} server is currently reporting as $COLOUR"
                exit 1
              fi
            else
              echo "Error: ${{ needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR }} is not reporting a colour"
              exit 1
            fi
            if [ -f ~/server_status ]; then
              STATE=$(cat ~/server_status)
              if [ "$STATE" != "secondary" ]; then
                echo "Error: You are trying to promote ${{ needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR }} to primary but it is currently $STATE"
                exit 1
              fi
            else
              echo "Error: ${{ needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR }} is not reporting a status"
              exit 1
            fi

  Check-Demote:
    needs: Check-Inputs
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_demote_server }}'
    steps:
      - name: Check demote colour and status match
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            if [ -f ~/server_colour ]; then
              COLOUR=$(cat ~/server_colour)
              if [ "$COLOUR" != "${{ needs.Check-Inputs.outputs.DEMOTE_SERVER_COLOR }}" ]; then
                echo "Error: ${{ needs.Check-Inputs.outputs.DEMOTE_SERVER_COLOR }} server is currently reporting as $COLOUR"
                exit 1
              fi
            else
              echo "Error: ${{ needs.Check-Inputs.outputs.DEMOTE_SERVER_COLOR }} is not reporting a colour"
              exit 1
            fi
            if [ -f ~/server_status ]; then
              STATE=$(cat ~/server_status)
              if [ "$STATE" != "primary" ]; then
                echo "Error: You are trying to demote ${{ needs.Check-Inputs.outputs.DEMOTE_SERVER_COLOR }} to secondary but it is currently $STATE"
                exit 1
              fi
            else
              echo "Error: ${{ needs.Check-Inputs.outputs.DEMOTE_SERVER_COLOR }} is not reporting a status"
              exit 1
            fi

  Promote-Secondary: ## promoting secondary works by creating sub from current primary (server to demote) to current secondary (server to promote)
    needs: [Check-Inputs, Check-Promote, Check-Demote]
    if: ${{ !inputs.skip_sub_to_new_primary }}
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_demote_server }}'
    steps:
      - name: Enable Subscription to Current Secondary
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            # PGPASSWORD=${{secrets.MYSQL_PASS}} psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "ALTER SUBSCRIPTION social_sub_to_${{needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR}} ENABLE;"
            PGPASSWORD=${{secrets.MYSQL_PASS}} psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "DROP SUBSCRIPTION IF EXISTS social_sub_to_${{needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR}};"
            PGPASSWORD=${{secrets.MYSQL_PASS}} psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "
              CREATE SUBSCRIPTION social_sub_to_${{needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR}} 
              CONNECTION 'host=${{ vars.ALTERNATE_SERVER_HOST }} port=5432 user=${{ secrets.MYSQL_USER }} password=${{ secrets.MYSQL_PASS }} dbname=vermilion' 
              PUBLICATION social_pub_from_${{needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR}}
              WITH (origin = none, copy_data = false);"
            echo "secondary" > ~/server_status
  
  ## switch traffic to promoted server
  Switch-Traffic:
    needs: Promote-Secondary
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_promote_server }}'
    steps:
      - name: Switch Traffic
        run: |
          set -e
          set -o pipefail
          # Send Cloudflare API request and capture response
          RESPONSE=$(curl -s https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/dns_records/batch \
            -H "Authorization: Bearer ${{ secrets.CF_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "patches": [
                {"id": "31d213c9e151e6890770ca42805c4cb5", "content": "${{ vars.SERVER_HOST }}"},
                {"id": "d079e05689c286757625115f50e5e727", "content": "${{ vars.SERVER_HOST }}"},
                {"id": "626b1b1cbd00edac71a7e9255f22e4d0", "content": "${{ vars.SERVER_HOST }}"}
              ]
            }')
          # Check success field with jq
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" != "true" ]; then
            echo "Error: Cloudflare DNS update failed (success: $SUCCESS)"
            echo "Response: $RESPONSE"
            exit 1
          fi
          # Check for errors array
          ERRORS=$(echo "$RESPONSE" | jq -r '.errors')
          if [ "$ERRORS" != "[]" ]; then
            echo "Error: Cloudflare DNS update returned errors: $ERRORS"
            echo "Response: $RESPONSE"
            exit 1
          fi
  
  ## after switching traffic, we need to wait for the demote server to drain before killing the subscription to this server
  ## we can check this by querying running queries
  ## can also block writes: sudo --login -u postgres psql -d vermilion -t -c "REVOKE INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA social FROM ${{ secrets.MYSQL_USER }};"
  ## but probable unnecessary
  Wait-For-Drain:
    needs: Switch-Traffic
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_demote_server }}'
    steps:
      - name: Wait for demote server to drain
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          command_timeout: 300s # Allow up to 5 minutes for draining
          script: |
            set -e
            set -o pipefail
            MAX_ATTEMPTS=30
            SLEEP_SECONDS=10
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              ACTIVE_QUERIES=$(sudo --login -u postgres psql -d vermilion -t -c "SELECT COUNT(*) FROM pg_stat_activity WHERE state = 'active' AND query ILIKE '%social.%' AND usename != 'postgres' AND application_name NOT LIKE 'walreceiver' AND pid != pg_backend_pid();" | xargs)
              if [ "$ACTIVE_QUERIES" -eq 0 ]; then
                echo "No active queries in social schema on demote server. Draining complete at $(date)" >> ~/switchover_log
                exit 0
              fi
              echo "Attempt $ATTEMPT: $ACTIVE_QUERIES active queries in social schema remain on demote server at $(date)" >> ~/switchover_log
              sleep $SLEEP_SECONDS
              ATTEMPT=$((ATTEMPT + 1))
            done
            echo "Error: Demote server did not drain after $MAX_ATTEMPTS attempts" >> ~/switchover_log
            exit 1

  Demote-Primary: ## demoting primary works by dropping sub on current secondary (server to promote)
    needs: [Check-Inputs, Wait-For-Drain]
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_promote_server }}'
    steps:
      - name: Disable Subscription to Old Primary
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            sleep 60 # Wait a minute to ensure all connections have drained
            PGPASSWORD=${{secrets.MYSQL_PASS}} psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "DROP SUBSCRIPTION IF EXISTS social_sub_to_${{needs.Check-Inputs.outputs.DEMOTE_SERVER_COLOR}};"
            # PGPASSWORD=${{secrets.MYSQL_PASS}} psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "ALTER SUBSCRIPTION social_sub_to_${{needs.Check-Inputs.outputs.DEMOTE_SERVER_COLOR}} DISABLE;"
            echo "primary" > ~/server_status

  Rollback-Promote:
    needs: [Check-Inputs, Promote-Secondary]
    if: failure() && (needs.Promote-Secondary.result == 'success' || needs.Promote-Secondary.result == 'failure')
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_demote_server }}'
    steps:
      - name: Rollback-Promote-To-Secondary
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ vars.SERVER_HOST }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          capture_stdout: true
          script: |
            set -e
            set -o pipefail
            # PGPASSWORD=${{secrets.MYSQL_PASS}} psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "ALTER SUBSCRIPTION social_sub_to_${{needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR}} DISABLE;"
            PGPASSWORD=${{secrets.MYSQL_PASS}} psql -U ${{ secrets.MYSQL_USER }} -d vermilion -h localhost -c "DROP SUBSCRIPTION IF EXISTS social_sub_to_${{needs.Check-Inputs.outputs.PROMOTE_SERVER_COLOR}};"
            echo "primary" > ~/server_status
  
  Rollback-Switch-Traffic:
    needs: Switch-Traffic
    if: failure() && (needs.Switch-Traffic.result == 'success' || needs.Switch-Traffic.result == 'failure')
    runs-on: ubuntu-latest
    environment: '${{ github.event.inputs.hetzner_demote_server }}'
    steps:
      - name: Rollback-Switch-Traffic
        run: |
          set -e
          set -o pipefail
          # Send Cloudflare API request and capture response
          RESPONSE=$(curl -s https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/dns_records/batch \
            -H "Authorization: Bearer ${{ secrets.CF_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "patches": [
                {"id": "24d5dcb0e89e8292263e8a21cade0012", "content": "${{ vars.SERVER_HOST }}"}
              ]
            }')
          # Check success field with jq
          SUCCESS=$(echo "$RESPONSE" | jq -r '.success')
          if [ "$SUCCESS" != "true" ]; then
            echo "Error: Cloudflare DNS update failed (success: $SUCCESS)"
            echo "Response: $RESPONSE"
            exit 1
          fi
          # Check for errors array
          ERRORS=$(echo "$RESPONSE" | jq -r '.errors')
          if [ "$ERRORS" != "[]" ]; then
            echo "Error: Cloudflare DNS update returned errors: $ERRORS"
            echo "Response: $RESPONSE"
            exit 1
          fi

## NOTE: maybe instead of server_status, we need server_subscription_status and server_publication_status - it's a bit more complex but it would be more accurate